// Code generated by protoc-gen-go. DO NOT EDIT.
// source: work.proto

package message

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Work struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Viewed               uint32   `protobuf:"varint,2,opt,name=viewed,proto3" json:"viewed,omitempty"`
	AchievedCount        uint32   `protobuf:"varint,3,opt,name=achieved_count,json=achievedCount,proto3" json:"achieved_count,omitempty"`
	Achievement          string   `protobuf:"bytes,4,opt,name=achievement,proto3" json:"achievement,omitempty"`
	IsPlanned            bool     `protobuf:"varint,5,opt,name=is_planned,json=isPlanned,proto3" json:"is_planned,omitempty"`
	PlannedAt            int32    `protobuf:"varint,6,opt,name=planned_at,json=plannedAt,proto3" json:"planned_at,omitempty"`
	AchievedAt           int32    `protobuf:"varint,7,opt,name=achieved_at,json=achievedAt,proto3" json:"achieved_at,omitempty"`
	Created              int32    `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	Updated              int32    `protobuf:"varint,9,opt,name=updated,proto3" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Work) Reset()         { *m = Work{} }
func (m *Work) String() string { return proto.CompactTextString(m) }
func (*Work) ProtoMessage()    {}
func (*Work) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8ca8b2cad64666d, []int{0}
}

func (m *Work) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Work.Unmarshal(m, b)
}
func (m *Work) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Work.Marshal(b, m, deterministic)
}
func (m *Work) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Work.Merge(m, src)
}
func (m *Work) XXX_Size() int {
	return xxx_messageInfo_Work.Size(m)
}
func (m *Work) XXX_DiscardUnknown() {
	xxx_messageInfo_Work.DiscardUnknown(m)
}

var xxx_messageInfo_Work proto.InternalMessageInfo

func (m *Work) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Work) GetViewed() uint32 {
	if m != nil {
		return m.Viewed
	}
	return 0
}

func (m *Work) GetAchievedCount() uint32 {
	if m != nil {
		return m.AchievedCount
	}
	return 0
}

func (m *Work) GetAchievement() string {
	if m != nil {
		return m.Achievement
	}
	return ""
}

func (m *Work) GetIsPlanned() bool {
	if m != nil {
		return m.IsPlanned
	}
	return false
}

func (m *Work) GetPlannedAt() int32 {
	if m != nil {
		return m.PlannedAt
	}
	return 0
}

func (m *Work) GetAchievedAt() int32 {
	if m != nil {
		return m.AchievedAt
	}
	return 0
}

func (m *Work) GetCreated() int32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Work) GetUpdated() int32 {
	if m != nil {
		return m.Updated
	}
	return 0
}

type WorkId struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkId) Reset()         { *m = WorkId{} }
func (m *WorkId) String() string { return proto.CompactTextString(m) }
func (*WorkId) ProtoMessage()    {}
func (*WorkId) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8ca8b2cad64666d, []int{1}
}

func (m *WorkId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkId.Unmarshal(m, b)
}
func (m *WorkId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkId.Marshal(b, m, deterministic)
}
func (m *WorkId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkId.Merge(m, src)
}
func (m *WorkId) XXX_Size() int {
	return xxx_messageInfo_WorkId.Size(m)
}
func (m *WorkId) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkId.DiscardUnknown(m)
}

var xxx_messageInfo_WorkId proto.InternalMessageInfo

func (m *WorkId) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type WorkViewed struct {
	Viewed               uint32   `protobuf:"varint,2,opt,name=viewed,proto3" json:"viewed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkViewed) Reset()         { *m = WorkViewed{} }
func (m *WorkViewed) String() string { return proto.CompactTextString(m) }
func (*WorkViewed) ProtoMessage()    {}
func (*WorkViewed) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8ca8b2cad64666d, []int{2}
}

func (m *WorkViewed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkViewed.Unmarshal(m, b)
}
func (m *WorkViewed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkViewed.Marshal(b, m, deterministic)
}
func (m *WorkViewed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkViewed.Merge(m, src)
}
func (m *WorkViewed) XXX_Size() int {
	return xxx_messageInfo_WorkViewed.Size(m)
}
func (m *WorkViewed) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkViewed.DiscardUnknown(m)
}

var xxx_messageInfo_WorkViewed proto.InternalMessageInfo

func (m *WorkViewed) GetViewed() uint32 {
	if m != nil {
		return m.Viewed
	}
	return 0
}

type WorkAchievement struct {
	Achievement          string   `protobuf:"bytes,1,opt,name=achievement,proto3" json:"achievement,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkAchievement) Reset()         { *m = WorkAchievement{} }
func (m *WorkAchievement) String() string { return proto.CompactTextString(m) }
func (*WorkAchievement) ProtoMessage()    {}
func (*WorkAchievement) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8ca8b2cad64666d, []int{3}
}

func (m *WorkAchievement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkAchievement.Unmarshal(m, b)
}
func (m *WorkAchievement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkAchievement.Marshal(b, m, deterministic)
}
func (m *WorkAchievement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkAchievement.Merge(m, src)
}
func (m *WorkAchievement) XXX_Size() int {
	return xxx_messageInfo_WorkAchievement.Size(m)
}
func (m *WorkAchievement) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkAchievement.DiscardUnknown(m)
}

var xxx_messageInfo_WorkAchievement proto.InternalMessageInfo

func (m *WorkAchievement) GetAchievement() string {
	if m != nil {
		return m.Achievement
	}
	return ""
}

func init() {
	proto.RegisterType((*Work)(nil), "message.Work")
	proto.RegisterType((*WorkId)(nil), "message.WorkId")
	proto.RegisterType((*WorkViewed)(nil), "message.WorkViewed")
	proto.RegisterType((*WorkAchievement)(nil), "message.WorkAchievement")
}

func init() { proto.RegisterFile("work.proto", fileDescriptor_b8ca8b2cad64666d) }

var fileDescriptor_b8ca8b2cad64666d = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x4a, 0xf3, 0x40,
	0x10, 0xc7, 0xbb, 0xf9, 0xda, 0xa4, 0x99, 0x7e, 0x6d, 0x61, 0x04, 0x59, 0x04, 0x31, 0x2c, 0x0a,
	0x01, 0xa5, 0x07, 0x0b, 0xde, 0x3c, 0x14, 0x0f, 0xc5, 0x9b, 0x44, 0xd4, 0x63, 0x89, 0xd9, 0x41,
	0x97, 0xda, 0xa4, 0x24, 0xdb, 0xf6, 0x1d, 0x7c, 0x49, 0x5f, 0x45, 0x76, 0xb3, 0x95, 0xb4, 0x45,
	0xf0, 0x38, 0xbf, 0xdf, 0x4c, 0x98, 0xfc, 0x67, 0x01, 0x36, 0x45, 0x39, 0x1f, 0x2d, 0xcb, 0x42,
	0x17, 0x18, 0x2c, 0xa8, 0xaa, 0xd2, 0x37, 0x12, 0x9f, 0x1e, 0xb4, 0x5f, 0x8a, 0x72, 0x8e, 0x03,
	0xf0, 0x94, 0xe4, 0x2c, 0x62, 0x71, 0x3f, 0xf1, 0x94, 0xc4, 0x63, 0xf0, 0xd7, 0x8a, 0x36, 0x24,
	0xb9, 0x67, 0x99, 0xab, 0xf0, 0x02, 0x06, 0x69, 0xf6, 0xae, 0x68, 0x4d, 0x72, 0x96, 0x15, 0xab,
	0x5c, 0xf3, 0x7f, 0xd6, 0xf7, 0xb7, 0xf4, 0xce, 0x40, 0x8c, 0xa0, 0xe7, 0xc0, 0x82, 0x72, 0xcd,
	0xdb, 0x11, 0x8b, 0xc3, 0xa4, 0x89, 0xf0, 0x14, 0x40, 0x55, 0xb3, 0xe5, 0x47, 0x9a, 0xe7, 0x24,
	0x79, 0x27, 0x62, 0x71, 0x37, 0x09, 0x55, 0xf5, 0x50, 0x03, 0xa3, 0x9d, 0x9b, 0xa5, 0x9a, 0xfb,
	0x11, 0x8b, 0x3b, 0x49, 0xe8, 0xc8, 0x44, 0xe3, 0xd9, 0xcf, 0xf7, 0xad, 0x0f, 0xac, 0x87, 0x2d,
	0x9a, 0x68, 0xe4, 0x10, 0x64, 0x25, 0xa5, 0x9a, 0x24, 0xef, 0x5a, 0xb9, 0x2d, 0x8d, 0x59, 0x2d,
	0xa5, 0x35, 0x61, 0x6d, 0x5c, 0x29, 0x38, 0xf8, 0x26, 0x8b, 0x7b, 0xb9, 0x9f, 0x86, 0x38, 0x07,
	0x30, 0xe6, 0xb9, 0xce, 0xe0, 0x97, 0x6c, 0xc4, 0x18, 0x86, 0xa6, 0x6b, 0xd2, 0xf8, 0xcb, 0xbd,
	0x1c, 0xd8, 0x41, 0x0e, 0xd7, 0x5f, 0x0c, 0x7a, 0x66, 0xea, 0x91, 0xca, 0xb5, 0xca, 0x08, 0x2f,
	0x21, 0x98, 0x92, 0xb6, 0x37, 0x19, 0x8e, 0xdc, 0x99, 0x46, 0xf5, 0x5a, 0x27, 0xfd, 0x1d, 0x20,
	0x5a, 0x78, 0x03, 0xff, 0x9f, 0xec, 0xf2, 0x6e, 0xb3, 0x83, 0x89, 0xa3, 0x1d, 0x50, 0x77, 0x89,
	0x16, 0xde, 0xc2, 0x60, 0x4a, 0xba, 0xb9, 0xe8, 0xc1, 0x24, 0xdf, 0x01, 0x8d, 0x56, 0xd1, 0xc2,
	0x2b, 0xe8, 0x9a, 0x3b, 0xfd, 0x6d, 0xc9, 0x57, 0xdf, 0xbe, 0xb9, 0xf1, 0x77, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x8a, 0x72, 0x52, 0x98, 0x81, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkServiceClient is the client API for WorkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkServiceClient interface {
	GetWork(ctx context.Context, in *WorkId, opts ...grpc.CallOption) (*Work, error)
	UpdateViewed(ctx context.Context, in *WorkId, opts ...grpc.CallOption) (*WorkViewed, error)
	GetAchievement(ctx context.Context, in *WorkId, opts ...grpc.CallOption) (*WorkAchievement, error)
	PlanWork(ctx context.Context, in *WorkId, opts ...grpc.CallOption) (*Work, error)
}

type workServiceClient struct {
	cc *grpc.ClientConn
}

func NewWorkServiceClient(cc *grpc.ClientConn) WorkServiceClient {
	return &workServiceClient{cc}
}

func (c *workServiceClient) GetWork(ctx context.Context, in *WorkId, opts ...grpc.CallOption) (*Work, error) {
	out := new(Work)
	err := c.cc.Invoke(ctx, "/message.WorkService/GetWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) UpdateViewed(ctx context.Context, in *WorkId, opts ...grpc.CallOption) (*WorkViewed, error) {
	out := new(WorkViewed)
	err := c.cc.Invoke(ctx, "/message.WorkService/UpdateViewed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) GetAchievement(ctx context.Context, in *WorkId, opts ...grpc.CallOption) (*WorkAchievement, error) {
	out := new(WorkAchievement)
	err := c.cc.Invoke(ctx, "/message.WorkService/GetAchievement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) PlanWork(ctx context.Context, in *WorkId, opts ...grpc.CallOption) (*Work, error) {
	out := new(Work)
	err := c.cc.Invoke(ctx, "/message.WorkService/PlanWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkServiceServer is the server API for WorkService service.
type WorkServiceServer interface {
	GetWork(context.Context, *WorkId) (*Work, error)
	UpdateViewed(context.Context, *WorkId) (*WorkViewed, error)
	GetAchievement(context.Context, *WorkId) (*WorkAchievement, error)
	PlanWork(context.Context, *WorkId) (*Work, error)
}

func RegisterWorkServiceServer(s *grpc.Server, srv WorkServiceServer) {
	s.RegisterService(&_WorkService_serviceDesc, srv)
}

func _WorkService_GetWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).GetWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.WorkService/GetWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).GetWork(ctx, req.(*WorkId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_UpdateViewed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).UpdateViewed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.WorkService/UpdateViewed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).UpdateViewed(ctx, req.(*WorkId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_GetAchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).GetAchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.WorkService/GetAchievement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).GetAchievement(ctx, req.(*WorkId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_PlanWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).PlanWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.WorkService/PlanWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).PlanWork(ctx, req.(*WorkId))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.WorkService",
	HandlerType: (*WorkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWork",
			Handler:    _WorkService_GetWork_Handler,
		},
		{
			MethodName: "UpdateViewed",
			Handler:    _WorkService_UpdateViewed_Handler,
		},
		{
			MethodName: "GetAchievement",
			Handler:    _WorkService_GetAchievement_Handler,
		},
		{
			MethodName: "PlanWork",
			Handler:    _WorkService_PlanWork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "work.proto",
}
